//Dynamic Programming Approch to solve the problem


Steps involved:
1. initialize i to second element and j to first element
2. compare the ith element and jth element if greater than check the lis arr if jth element +1 if less than ith element then increment the ith element by 1
3. increment the i and start j from 0 and check the conditions again
4. Last index of the LIS arr give the longest increasing subsequence

//code

static int longestIncreasingSubsequence(int[] arr) {
        int lis[] = new int [arr.length];
        
       for(int i=0;i<lis.length;i++){
            lis[i]=1;   //Each element is the longest subsequence of itself.
        }
        for(int i=1;i<arr.length;i++){
            for(int j=0;j<i;j++){
                if(arr[i]>arr[j] && (lis[j]+1)>lis[i]){
                    lis[i]=lis[j]+1;
                    System.out.println(lis[i]);
                }
            }
        }
    return lis[lis.length-1];

    }
    
    
    Time Complexity is O(2^n).
    Can be improved further to O(nlogn)
    
    
    
